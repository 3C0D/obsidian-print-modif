/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PrintPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var PrintSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Print Plugin").setHeading();
    new import_obsidian.Setting(containerEl).setName("Print Note Title").setDesc("Include the note title in the printout.").addToggle((toggle) => toggle.setValue(this.plugin.settings.printTitle).onChange(async (value) => {
      this.plugin.settings.printTitle = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Direct Print").setDesc("Print documents directly using the default printer, bypassing the print modal.").addToggle((toggle) => toggle.setValue(this.plugin.settings.directPrint).onChange(async (value) => {
      this.plugin.settings.directPrint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Font Size").setDesc("Set the font size for the printed note.").addText((text) => text.setPlaceholder("14px").setValue(this.plugin.settings.fontSize).onChange(async (value) => {
      this.plugin.settings.fontSize = value;
      await this.plugin.saveSettings();
    }));
    ["h1Size", "h2Size", "h3Size", "h4Size", "h5Size", "h6Size"].forEach((heading, index) => {
      new import_obsidian.Setting(containerEl).setName(`Heading ${index + 1} Size`).setDesc(`Set the size for <h${index + 1}> elements.`).addText((text) => text.setPlaceholder(`${this.plugin.settings[heading]}`).setValue(this.plugin.settings[heading]).onChange(async (value) => {
        this.plugin.settings[heading] = value;
        await this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("Enable debug mode. This will open the print window for inspection.").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Custom CSS").setDesc("Add custom CSS for the printout.").addTextArea((textarea) => textarea.setPlaceholder("Enter your custom CSS here").setValue(this.plugin.settings.customCSS || "").onChange(async (value) => {
      this.plugin.settings.customCSS = value;
      await this.plugin.saveSettings();
    }));
  }
};

// types.ts
var DEFAULT_SETTINGS = {
  printTitle: true,
  directPrint: false,
  fontSize: "14px",
  h1Size: "20px",
  h2Size: "18px",
  h3Size: "16px",
  h4Size: "14px",
  h5Size: "14px",
  h6Size: "12px",
  debugMode: false,
  customCSS: ""
};

// printModal.ts
async function openPrintModal(content, settings) {
  return new Promise((resolve) => {
    const { remote } = window.require("electron");
    let printWindow = new remote.BrowserWindow({
      width: 800,
      height: 600,
      show: settings.debugMode,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false
      }
    });
    const htmlContent = `
            <html>
                <head>
                    <title>Print Note</title>
                    <style>
                        body { 
                            font-family: sans-serif; 
                            margin: 20px; 
                            font-size: ${settings.fontSize};
                        }
                        .markdown-preview-sizer {
                            min-height: 0 !important;
                            padding: 0 !important;
                        }
                        h1, .inline-title { font-size: ${settings.h1Size}; font-weight: bold; }
                        h2 { font-size: ${settings.h2Size}; }
                        h3 { font-size: ${settings.h3Size}; }
                        h4 { font-size: ${settings.h4Size}; }
                        h5 { font-size: ${settings.h5Size}; }
                        h6 { font-size: ${settings.h6Size}; }
                        .collapse-indicator { display: none; }
                        .metadata-container { display: none; }
                        ${settings.customCSS || ""}
                    </style>
                </head>
                <body class="obsidian-print">${content}</body>
            </html>
        `;
    printWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`);
    printWindow.webContents.on("did-finish-load", () => {
      if (settings.debugMode) {
        printWindow.webContents.openDevTools();
      }
      printWindow.webContents.print({
        silent: settings.directPrint,
        printBackground: true
      }, (success, failureReason) => {
        if (!settings.debugMode) {
          printWindow.close();
        }
        if (settings.debugMode) {
          console.log(success, failureReason);
        }
        resolve();
      });
    });
  });
}

// main.ts
var PrintPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addCommand({
      id: "print-note",
      name: "Print Current Note",
      callback: () => this.printNote()
    });
    this.addSettingTab(new PrintSettingTab(this.app, this));
    this.addRibbonIcon("printer", "Print Note", (evt) => {
      this.printNote();
    });
  }
  async printNote() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!activeView) {
      new import_obsidian2.Notice("No active note to print.");
      return;
    }
    if (activeView.getMode() !== "preview") {
      new import_obsidian2.Notice("Please open the reading view first.");
      return;
    }
    const content = activeView.contentEl.querySelector(".markdown-reading-view");
    if (!content) {
      new import_obsidian2.Notice("Failed to retrieve note content.");
      return;
    }
    const printContent = content.cloneNode(true);
    const titleElement = printContent.querySelector(".inline-title");
    if (!this.settings.printTitle && titleElement) {
      titleElement.remove();
    }
    await openPrintModal(printContent.innerHTML, this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
